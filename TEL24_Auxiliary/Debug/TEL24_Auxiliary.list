
TEL24_Auxiliary.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000161c  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080018e8  080018e8  000118e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080018f8  080018f8  000118f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080018fc  080018fc  000118fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08001900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000010  08001910  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000030  08001910  00020030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 10 .debug_info   000058b8  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000fda  00000000  00000000  00025939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000005f0  00000000  00000000  00026918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000455  00000000  00000000  00026f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000308d0  00000000  00000000  0002735d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000652e  00000000  00000000  00057c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136bf6  00000000  00000000  0005e15b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00001638  00000000  00000000  00194d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000065  00000000  00000000  0019638c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	080018d0 	.word	0x080018d0

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	080018d0 	.word	0x080018d0

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000310:	f000 f866 	bl	80003e0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000314:	f000 f97e 	bl	8000614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000318:	f000 f804 	bl	8000324 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  main_function();
 800031c:	f000 f891 	bl	8000442 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000320:	e7fe      	b.n	8000320 <main+0x14>
	...

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b09c      	sub	sp, #112	; 0x70
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800032e:	224c      	movs	r2, #76	; 0x4c
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f001 faa0 	bl	8001878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2220      	movs	r2, #32
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f001 fa9a 	bl	8001878 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000344:	2002      	movs	r0, #2
 8000346:	f000 fb53 	bl	80009f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800034a:	2300      	movs	r3, #0
 800034c:	603b      	str	r3, [r7, #0]
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemClock_Config+0xb8>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000356:	4a21      	ldr	r2, [pc, #132]	; (80003dc <SystemClock_Config+0xb8>)
 8000358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035c:	6193      	str	r3, [r2, #24]
 800035e:	4b1f      	ldr	r3, [pc, #124]	; (80003dc <SystemClock_Config+0xb8>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000366:	603b      	str	r3, [r7, #0]
 8000368:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800036a:	bf00      	nop
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemClock_Config+0xb8>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000378:	d1f8      	bne.n	800036c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800037a:	2302      	movs	r3, #2
 800037c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800037e:	2301      	movs	r3, #1
 8000380:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000382:	2340      	movs	r3, #64	; 0x40
 8000384:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000386:	2300      	movs	r3, #0
 8000388:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800038e:	4618      	mov	r0, r3
 8000390:	f000 fb68 	bl	8000a64 <HAL_RCC_OscConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800039a:	f000 f84d 	bl	8000438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039e:	233f      	movs	r3, #63	; 0x3f
 80003a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003a2:	2300      	movs	r3, #0
 80003a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003ba:	2300      	movs	r3, #0
 80003bc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	2101      	movs	r1, #1
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 ff28 	bl	8001218 <HAL_RCC_ClockConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003ce:	f000 f833 	bl	8000438 <Error_Handler>
  }
}
 80003d2:	bf00      	nop
 80003d4:	3770      	adds	r7, #112	; 0x70
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	58024800 	.word	0x58024800

080003e0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80003e6:	463b      	mov	r3, r7
 80003e8:	2200      	movs	r2, #0
 80003ea:	601a      	str	r2, [r3, #0]
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	609a      	str	r2, [r3, #8]
 80003f0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80003f2:	f000 fa85 	bl	8000900 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80003f6:	2301      	movs	r3, #1
 80003f8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80003fe:	2300      	movs	r3, #0
 8000400:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000402:	231f      	movs	r3, #31
 8000404:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000406:	2387      	movs	r3, #135	; 0x87
 8000408:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800040a:	2300      	movs	r3, #0
 800040c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800040e:	2300      	movs	r3, #0
 8000410:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000412:	2301      	movs	r3, #1
 8000414:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000416:	2301      	movs	r3, #1
 8000418:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800041a:	2300      	movs	r3, #0
 800041c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800041e:	2300      	movs	r3, #0
 8000420:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000422:	463b      	mov	r3, r7
 8000424:	4618      	mov	r0, r3
 8000426:	f000 faa3 	bl	8000970 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800042a:	2004      	movs	r0, #4
 800042c:	f000 fa80 	bl	8000930 <HAL_MPU_Enable>

}
 8000430:	bf00      	nop
 8000432:	3710      	adds	r7, #16
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}

08000438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800043c:	b672      	cpsid	i
}
 800043e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000440:	e7fe      	b.n	8000440 <Error_Handler+0x8>

08000442 <main_function>:
 */


#include <mainpp.h>

void main_function(void){
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0
	// DC_MOTOR::init();

	while(1){
 8000446:	e7fe      	b.n	8000446 <main_function+0x4>

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044e:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <HAL_MspInit+0x30>)
 8000450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000454:	4a08      	ldr	r2, [pc, #32]	; (8000478 <HAL_MspInit+0x30>)
 8000456:	f043 0302 	orr.w	r3, r3, #2
 800045a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <HAL_MspInit+0x30>)
 8000460:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000464:	f003 0302 	and.w	r3, r3, #2
 8000468:	607b      	str	r3, [r7, #4]
 800046a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	58024400 	.word	0x58024400

0800047c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000480:	e7fe      	b.n	8000480 <NMI_Handler+0x4>

08000482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000486:	e7fe      	b.n	8000486 <HardFault_Handler+0x4>

08000488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800048c:	e7fe      	b.n	800048c <MemManage_Handler+0x4>

0800048e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000492:	e7fe      	b.n	8000492 <BusFault_Handler+0x4>

08000494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000498:	e7fe      	b.n	8000498 <UsageFault_Handler+0x4>

0800049a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr

080004b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c8:	f000 f916 	bl	80006f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}

080004d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80004d4:	4b32      	ldr	r3, [pc, #200]	; (80005a0 <SystemInit+0xd0>)
 80004d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004da:	4a31      	ldr	r2, [pc, #196]	; (80005a0 <SystemInit+0xd0>)
 80004dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80004e4:	4b2f      	ldr	r3, [pc, #188]	; (80005a4 <SystemInit+0xd4>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f003 030f 	and.w	r3, r3, #15
 80004ec:	2b06      	cmp	r3, #6
 80004ee:	d807      	bhi.n	8000500 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80004f0:	4b2c      	ldr	r3, [pc, #176]	; (80005a4 <SystemInit+0xd4>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f023 030f 	bic.w	r3, r3, #15
 80004f8:	4a2a      	ldr	r2, [pc, #168]	; (80005a4 <SystemInit+0xd4>)
 80004fa:	f043 0307 	orr.w	r3, r3, #7
 80004fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000500:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <SystemInit+0xd8>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a28      	ldr	r2, [pc, #160]	; (80005a8 <SystemInit+0xd8>)
 8000506:	f043 0301 	orr.w	r3, r3, #1
 800050a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800050c:	4b26      	ldr	r3, [pc, #152]	; (80005a8 <SystemInit+0xd8>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000512:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <SystemInit+0xd8>)
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	4924      	ldr	r1, [pc, #144]	; (80005a8 <SystemInit+0xd8>)
 8000518:	4b24      	ldr	r3, [pc, #144]	; (80005ac <SystemInit+0xdc>)
 800051a:	4013      	ands	r3, r2
 800051c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800051e:	4b21      	ldr	r3, [pc, #132]	; (80005a4 <SystemInit+0xd4>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f003 0308 	and.w	r3, r3, #8
 8000526:	2b00      	cmp	r3, #0
 8000528:	d007      	beq.n	800053a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800052a:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <SystemInit+0xd4>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f023 030f 	bic.w	r3, r3, #15
 8000532:	4a1c      	ldr	r2, [pc, #112]	; (80005a4 <SystemInit+0xd4>)
 8000534:	f043 0307 	orr.w	r3, r3, #7
 8000538:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800053a:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <SystemInit+0xd8>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000540:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <SystemInit+0xd8>)
 8000542:	2200      	movs	r2, #0
 8000544:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000546:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <SystemInit+0xd8>)
 8000548:	2200      	movs	r2, #0
 800054a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800054c:	4b16      	ldr	r3, [pc, #88]	; (80005a8 <SystemInit+0xd8>)
 800054e:	4a18      	ldr	r2, [pc, #96]	; (80005b0 <SystemInit+0xe0>)
 8000550:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <SystemInit+0xd8>)
 8000554:	4a17      	ldr	r2, [pc, #92]	; (80005b4 <SystemInit+0xe4>)
 8000556:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <SystemInit+0xd8>)
 800055a:	4a17      	ldr	r2, [pc, #92]	; (80005b8 <SystemInit+0xe8>)
 800055c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800055e:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <SystemInit+0xd8>)
 8000560:	2200      	movs	r2, #0
 8000562:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000564:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <SystemInit+0xd8>)
 8000566:	4a14      	ldr	r2, [pc, #80]	; (80005b8 <SystemInit+0xe8>)
 8000568:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800056a:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <SystemInit+0xd8>)
 800056c:	2200      	movs	r2, #0
 800056e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000570:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <SystemInit+0xd8>)
 8000572:	4a11      	ldr	r2, [pc, #68]	; (80005b8 <SystemInit+0xe8>)
 8000574:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <SystemInit+0xd8>)
 8000578:	2200      	movs	r2, #0
 800057a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800057c:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <SystemInit+0xd8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a09      	ldr	r2, [pc, #36]	; (80005a8 <SystemInit+0xd8>)
 8000582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000586:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000588:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <SystemInit+0xd8>)
 800058a:	2200      	movs	r2, #0
 800058c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <SystemInit+0xec>)
 8000590:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000594:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000596:	bf00      	nop
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	e000ed00 	.word	0xe000ed00
 80005a4:	52002000 	.word	0x52002000
 80005a8:	58024400 	.word	0x58024400
 80005ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80005b0:	02020200 	.word	0x02020200
 80005b4:	01ff0000 	.word	0x01ff0000
 80005b8:	01010280 	.word	0x01010280
 80005bc:	52004000 	.word	0x52004000

080005c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80005c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80005c4:	f7ff ff84 	bl	80004d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c8:	480c      	ldr	r0, [pc, #48]	; (80005fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005ca:	490d      	ldr	r1, [pc, #52]	; (8000600 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005cc:	4a0d      	ldr	r2, [pc, #52]	; (8000604 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d0:	e002      	b.n	80005d8 <LoopCopyDataInit>

080005d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d6:	3304      	adds	r3, #4

080005d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005dc:	d3f9      	bcc.n	80005d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005de:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005e0:	4c0a      	ldr	r4, [pc, #40]	; (800060c <LoopFillZerobss+0x22>)
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e4:	e001      	b.n	80005ea <LoopFillZerobss>

080005e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e8:	3204      	adds	r2, #4

080005ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ec:	d3fb      	bcc.n	80005e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ee:	f001 f94b 	bl	8001888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005f2:	f7ff fe8b 	bl	800030c <main>
  bx  lr
 80005f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005f8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80005fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000600:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000604:	08001900 	.word	0x08001900
  ldr r2, =_sbss
 8000608:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800060c:	24000030 	.word	0x24000030

08000610 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC3_IRQHandler>
	...

08000614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800061a:	2003      	movs	r0, #3
 800061c:	f000 f93e 	bl	800089c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000620:	f000 ffb0 	bl	8001584 <HAL_RCC_GetSysClockFreq>
 8000624:	4602      	mov	r2, r0
 8000626:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_Init+0x68>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	0a1b      	lsrs	r3, r3, #8
 800062c:	f003 030f 	and.w	r3, r3, #15
 8000630:	4913      	ldr	r1, [pc, #76]	; (8000680 <HAL_Init+0x6c>)
 8000632:	5ccb      	ldrb	r3, [r1, r3]
 8000634:	f003 031f 	and.w	r3, r3, #31
 8000638:	fa22 f303 	lsr.w	r3, r2, r3
 800063c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <HAL_Init+0x68>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	f003 030f 	and.w	r3, r3, #15
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <HAL_Init+0x6c>)
 8000648:	5cd3      	ldrb	r3, [r2, r3]
 800064a:	f003 031f 	and.w	r3, r3, #31
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	fa22 f303 	lsr.w	r3, r2, r3
 8000654:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <HAL_Init+0x70>)
 8000656:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000658:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <HAL_Init+0x74>)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800065e:	200f      	movs	r0, #15
 8000660:	f000 f814 	bl	800068c <HAL_InitTick>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	e002      	b.n	8000674 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800066e:	f7ff feeb 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000672:	2300      	movs	r3, #0
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	58024400 	.word	0x58024400
 8000680:	080018e8 	.word	0x080018e8
 8000684:	24000004 	.word	0x24000004
 8000688:	24000000 	.word	0x24000000

0800068c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <HAL_InitTick+0x60>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d101      	bne.n	80006a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800069c:	2301      	movs	r3, #1
 800069e:	e021      	b.n	80006e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <HAL_InitTick+0x64>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <HAL_InitTick+0x60>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	4619      	mov	r1, r3
 80006aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80006b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f915 	bl	80008e6 <HAL_SYSTICK_Config>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e00e      	b.n	80006e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2b0f      	cmp	r3, #15
 80006ca:	d80a      	bhi.n	80006e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006cc:	2200      	movs	r2, #0
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	f04f 30ff 	mov.w	r0, #4294967295
 80006d4:	f000 f8ed 	bl	80008b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d8:	4a06      	ldr	r2, [pc, #24]	; (80006f4 <HAL_InitTick+0x68>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006de:	2300      	movs	r3, #0
 80006e0:	e000      	b.n	80006e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	2400000c 	.word	0x2400000c
 80006f0:	24000000 	.word	0x24000000
 80006f4:	24000008 	.word	0x24000008

080006f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_IncTick+0x20>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_IncTick+0x24>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4413      	add	r3, r2
 8000708:	4a04      	ldr	r2, [pc, #16]	; (800071c <HAL_IncTick+0x24>)
 800070a:	6013      	str	r3, [r2, #0]
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	2400000c 	.word	0x2400000c
 800071c:	2400002c 	.word	0x2400002c

08000720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return uwTick;
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <HAL_GetTick+0x14>)
 8000726:	681b      	ldr	r3, [r3, #0]
}
 8000728:	4618      	mov	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	2400002c 	.word	0x2400002c

08000738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000748:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <__NVIC_SetPriorityGrouping+0x40>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000754:	4013      	ands	r3, r2
 8000756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <__NVIC_SetPriorityGrouping+0x44>)
 8000762:	4313      	orrs	r3, r2
 8000764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000766:	4a04      	ldr	r2, [pc, #16]	; (8000778 <__NVIC_SetPriorityGrouping+0x40>)
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	60d3      	str	r3, [r2, #12]
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00
 800077c:	05fa0000 	.word	0x05fa0000

08000780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <__NVIC_GetPriorityGrouping+0x18>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	0a1b      	lsrs	r3, r3, #8
 800078a:	f003 0307 	and.w	r3, r3, #7
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	6039      	str	r1, [r7, #0]
 80007a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80007a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	db0a      	blt.n	80007c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	490c      	ldr	r1, [pc, #48]	; (80007e8 <__NVIC_SetPriority+0x4c>)
 80007b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007ba:	0112      	lsls	r2, r2, #4
 80007bc:	b2d2      	uxtb	r2, r2
 80007be:	440b      	add	r3, r1
 80007c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c4:	e00a      	b.n	80007dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4908      	ldr	r1, [pc, #32]	; (80007ec <__NVIC_SetPriority+0x50>)
 80007cc:	88fb      	ldrh	r3, [r7, #6]
 80007ce:	f003 030f 	and.w	r3, r3, #15
 80007d2:	3b04      	subs	r3, #4
 80007d4:	0112      	lsls	r2, r2, #4
 80007d6:	b2d2      	uxtb	r2, r2
 80007d8:	440b      	add	r3, r1
 80007da:	761a      	strb	r2, [r3, #24]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	e000e100 	.word	0xe000e100
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b089      	sub	sp, #36	; 0x24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f003 0307 	and.w	r3, r3, #7
 8000802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	f1c3 0307 	rsb	r3, r3, #7
 800080a:	2b04      	cmp	r3, #4
 800080c:	bf28      	it	cs
 800080e:	2304      	movcs	r3, #4
 8000810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	3304      	adds	r3, #4
 8000816:	2b06      	cmp	r3, #6
 8000818:	d902      	bls.n	8000820 <NVIC_EncodePriority+0x30>
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3b03      	subs	r3, #3
 800081e:	e000      	b.n	8000822 <NVIC_EncodePriority+0x32>
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	f04f 32ff 	mov.w	r2, #4294967295
 8000828:	69bb      	ldr	r3, [r7, #24]
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	43da      	mvns	r2, r3
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	401a      	ands	r2, r3
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000838:	f04f 31ff 	mov.w	r1, #4294967295
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	43d9      	mvns	r1, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000848:	4313      	orrs	r3, r2
         );
}
 800084a:	4618      	mov	r0, r3
 800084c:	3724      	adds	r7, #36	; 0x24
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3b01      	subs	r3, #1
 8000864:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000868:	d301      	bcc.n	800086e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800086a:	2301      	movs	r3, #1
 800086c:	e00f      	b.n	800088e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <SysTick_Config+0x40>)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3b01      	subs	r3, #1
 8000874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000876:	210f      	movs	r1, #15
 8000878:	f04f 30ff 	mov.w	r0, #4294967295
 800087c:	f7ff ff8e 	bl	800079c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <SysTick_Config+0x40>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000886:	4b04      	ldr	r3, [pc, #16]	; (8000898 <SysTick_Config+0x40>)
 8000888:	2207      	movs	r2, #7
 800088a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	e000e010 	.word	0xe000e010

0800089c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff ff47 	bl	8000738 <__NVIC_SetPriorityGrouping>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b086      	sub	sp, #24
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	4603      	mov	r3, r0
 80008ba:	60b9      	str	r1, [r7, #8]
 80008bc:	607a      	str	r2, [r7, #4]
 80008be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008c0:	f7ff ff5e 	bl	8000780 <__NVIC_GetPriorityGrouping>
 80008c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	68b9      	ldr	r1, [r7, #8]
 80008ca:	6978      	ldr	r0, [r7, #20]
 80008cc:	f7ff ff90 	bl	80007f0 <NVIC_EncodePriority>
 80008d0:	4602      	mov	r2, r0
 80008d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80008d6:	4611      	mov	r1, r2
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff5f 	bl	800079c <__NVIC_SetPriority>
}
 80008de:	bf00      	nop
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ffb2 	bl	8000858 <SysTick_Config>
 80008f4:	4603      	mov	r3, r0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000904:	f3bf 8f5f 	dmb	sy
}
 8000908:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800090a:	4b07      	ldr	r3, [pc, #28]	; (8000928 <HAL_MPU_Disable+0x28>)
 800090c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090e:	4a06      	ldr	r2, [pc, #24]	; (8000928 <HAL_MPU_Disable+0x28>)
 8000910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000914:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <HAL_MPU_Disable+0x2c>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00
 800092c:	e000ed90 	.word	0xe000ed90

08000930 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000938:	4a0b      	ldr	r2, [pc, #44]	; (8000968 <HAL_MPU_Enable+0x38>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <HAL_MPU_Enable+0x3c>)
 8000944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000946:	4a09      	ldr	r2, [pc, #36]	; (800096c <HAL_MPU_Enable+0x3c>)
 8000948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800094c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800094e:	f3bf 8f4f 	dsb	sy
}
 8000952:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000954:	f3bf 8f6f 	isb	sy
}
 8000958:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	e000ed90 	.word	0xe000ed90
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	785a      	ldrb	r2, [r3, #1]
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <HAL_MPU_ConfigRegion+0x7c>)
 800097e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <HAL_MPU_ConfigRegion+0x7c>)
 8000982:	691b      	ldr	r3, [r3, #16]
 8000984:	4a19      	ldr	r2, [pc, #100]	; (80009ec <HAL_MPU_ConfigRegion+0x7c>)
 8000986:	f023 0301 	bic.w	r3, r3, #1
 800098a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800098c:	4a17      	ldr	r2, [pc, #92]	; (80009ec <HAL_MPU_ConfigRegion+0x7c>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	7b1b      	ldrb	r3, [r3, #12]
 8000998:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	7adb      	ldrb	r3, [r3, #11]
 800099e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80009a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	7a9b      	ldrb	r3, [r3, #10]
 80009a6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80009a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	7b5b      	ldrb	r3, [r3, #13]
 80009ae:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80009b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	7b9b      	ldrb	r3, [r3, #14]
 80009b6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80009b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	7bdb      	ldrb	r3, [r3, #15]
 80009be:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80009c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	7a5b      	ldrb	r3, [r3, #9]
 80009c6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80009c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	7a1b      	ldrb	r3, [r3, #8]
 80009ce:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80009d0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	7812      	ldrb	r2, [r2, #0]
 80009d6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80009da:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80009dc:	6113      	str	r3, [r2, #16]
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000ed90 	.word	0xe000ed90

080009f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <HAL_PWREx_ConfigSupply+0x70>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	2b04      	cmp	r3, #4
 8000a02:	d00a      	beq.n	8000a1a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <HAL_PWREx_ConfigSupply+0x70>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	f003 0307 	and.w	r3, r3, #7
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d001      	beq.n	8000a16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	e01f      	b.n	8000a56 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e01d      	b.n	8000a56 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <HAL_PWREx_ConfigSupply+0x70>)
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	f023 0207 	bic.w	r2, r3, #7
 8000a22:	490f      	ldr	r1, [pc, #60]	; (8000a60 <HAL_PWREx_ConfigSupply+0x70>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000a2a:	f7ff fe79 	bl	8000720 <HAL_GetTick>
 8000a2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000a30:	e009      	b.n	8000a46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000a32:	f7ff fe75 	bl	8000720 <HAL_GetTick>
 8000a36:	4602      	mov	r2, r0
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a40:	d901      	bls.n	8000a46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e007      	b.n	8000a56 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_PWREx_ConfigSupply+0x70>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a52:	d1ee      	bne.n	8000a32 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	58024800 	.word	0x58024800

08000a64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08c      	sub	sp, #48	; 0x30
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d101      	bne.n	8000a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e3c8      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f000 8087 	beq.w	8000b92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a84:	4b88      	ldr	r3, [pc, #544]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000a86:	691b      	ldr	r3, [r3, #16]
 8000a88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000a8e:	4b86      	ldr	r3, [pc, #536]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a92:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a96:	2b10      	cmp	r3, #16
 8000a98:	d007      	beq.n	8000aaa <HAL_RCC_OscConfig+0x46>
 8000a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a9c:	2b18      	cmp	r3, #24
 8000a9e:	d110      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x5e>
 8000aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aa2:	f003 0303 	and.w	r3, r3, #3
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d10b      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aaa:	4b7f      	ldr	r3, [pc, #508]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d06c      	beq.n	8000b90 <HAL_RCC_OscConfig+0x12c>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d168      	bne.n	8000b90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e3a2      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aca:	d106      	bne.n	8000ada <HAL_RCC_OscConfig+0x76>
 8000acc:	4b76      	ldr	r3, [pc, #472]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a75      	ldr	r2, [pc, #468]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ad6:	6013      	str	r3, [r2, #0]
 8000ad8:	e02e      	b.n	8000b38 <HAL_RCC_OscConfig+0xd4>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d10c      	bne.n	8000afc <HAL_RCC_OscConfig+0x98>
 8000ae2:	4b71      	ldr	r3, [pc, #452]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a70      	ldr	r2, [pc, #448]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	4b6e      	ldr	r3, [pc, #440]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a6d      	ldr	r2, [pc, #436]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	e01d      	b.n	8000b38 <HAL_RCC_OscConfig+0xd4>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b04:	d10c      	bne.n	8000b20 <HAL_RCC_OscConfig+0xbc>
 8000b06:	4b68      	ldr	r3, [pc, #416]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a67      	ldr	r2, [pc, #412]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b10:	6013      	str	r3, [r2, #0]
 8000b12:	4b65      	ldr	r3, [pc, #404]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a64      	ldr	r2, [pc, #400]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b1c:	6013      	str	r3, [r2, #0]
 8000b1e:	e00b      	b.n	8000b38 <HAL_RCC_OscConfig+0xd4>
 8000b20:	4b61      	ldr	r3, [pc, #388]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a60      	ldr	r2, [pc, #384]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	4b5e      	ldr	r3, [pc, #376]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a5d      	ldr	r2, [pc, #372]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d013      	beq.n	8000b68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b40:	f7ff fdee 	bl	8000720 <HAL_GetTick>
 8000b44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000b46:	e008      	b.n	8000b5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b48:	f7ff fdea 	bl	8000720 <HAL_GetTick>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	2b64      	cmp	r3, #100	; 0x64
 8000b54:	d901      	bls.n	8000b5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b56:	2303      	movs	r3, #3
 8000b58:	e356      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000b5a:	4b53      	ldr	r3, [pc, #332]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d0f0      	beq.n	8000b48 <HAL_RCC_OscConfig+0xe4>
 8000b66:	e014      	b.n	8000b92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b68:	f7ff fdda 	bl	8000720 <HAL_GetTick>
 8000b6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000b6e:	e008      	b.n	8000b82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b70:	f7ff fdd6 	bl	8000720 <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	2b64      	cmp	r3, #100	; 0x64
 8000b7c:	d901      	bls.n	8000b82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	e342      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000b82:	4b49      	ldr	r3, [pc, #292]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d1f0      	bne.n	8000b70 <HAL_RCC_OscConfig+0x10c>
 8000b8e:	e000      	b.n	8000b92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f000 808c 	beq.w	8000cb8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ba0:	4b41      	ldr	r3, [pc, #260]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000ba2:	691b      	ldr	r3, [r3, #16]
 8000ba4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000ba8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000baa:	4b3f      	ldr	r3, [pc, #252]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000bb0:	6a3b      	ldr	r3, [r7, #32]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d007      	beq.n	8000bc6 <HAL_RCC_OscConfig+0x162>
 8000bb6:	6a3b      	ldr	r3, [r7, #32]
 8000bb8:	2b18      	cmp	r3, #24
 8000bba:	d137      	bne.n	8000c2c <HAL_RCC_OscConfig+0x1c8>
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f003 0303 	and.w	r3, r3, #3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d132      	bne.n	8000c2c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000bc6:	4b38      	ldr	r3, [pc, #224]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d005      	beq.n	8000bde <HAL_RCC_OscConfig+0x17a>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d101      	bne.n	8000bde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e314      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000bde:	4b32      	ldr	r3, [pc, #200]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f023 0219 	bic.w	r2, r3, #25
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	492f      	ldr	r1, [pc, #188]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000bec:	4313      	orrs	r3, r2
 8000bee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bf0:	f7ff fd96 	bl	8000720 <HAL_GetTick>
 8000bf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000bf6:	e008      	b.n	8000c0a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bf8:	f7ff fd92 	bl	8000720 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d901      	bls.n	8000c0a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8000c06:	2303      	movs	r3, #3
 8000c08:	e2fe      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c0a:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d0f0      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c16:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	061b      	lsls	r3, r3, #24
 8000c24:	4920      	ldr	r1, [pc, #128]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000c26:	4313      	orrs	r3, r2
 8000c28:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c2a:	e045      	b.n	8000cb8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d026      	beq.n	8000c82 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f023 0219 	bic.w	r2, r3, #25
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	4919      	ldr	r1, [pc, #100]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000c42:	4313      	orrs	r3, r2
 8000c44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c46:	f7ff fd6b 	bl	8000720 <HAL_GetTick>
 8000c4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c4c:	e008      	b.n	8000c60 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c4e:	f7ff fd67 	bl	8000720 <HAL_GetTick>
 8000c52:	4602      	mov	r2, r0
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d901      	bls.n	8000c60 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	e2d3      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d0f0      	beq.n	8000c4e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	691b      	ldr	r3, [r3, #16]
 8000c78:	061b      	lsls	r3, r3, #24
 8000c7a:	490b      	ldr	r1, [pc, #44]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	604b      	str	r3, [r1, #4]
 8000c80:	e01a      	b.n	8000cb8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <HAL_RCC_OscConfig+0x244>)
 8000c88:	f023 0301 	bic.w	r3, r3, #1
 8000c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c8e:	f7ff fd47 	bl	8000720 <HAL_GetTick>
 8000c92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000c94:	e00a      	b.n	8000cac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c96:	f7ff fd43 	bl	8000720 <HAL_GetTick>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d903      	bls.n	8000cac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	e2af      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
 8000ca8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000cac:	4b96      	ldr	r3, [pc, #600]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d1ee      	bne.n	8000c96 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f003 0310 	and.w	r3, r3, #16
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d06a      	beq.n	8000d9a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cc4:	4b90      	ldr	r3, [pc, #576]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000ccc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000cce:	4b8e      	ldr	r3, [pc, #568]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	2b08      	cmp	r3, #8
 8000cd8:	d007      	beq.n	8000cea <HAL_RCC_OscConfig+0x286>
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	2b18      	cmp	r3, #24
 8000cde:	d11b      	bne.n	8000d18 <HAL_RCC_OscConfig+0x2b4>
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	f003 0303 	and.w	r3, r3, #3
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d116      	bne.n	8000d18 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000cea:	4b87      	ldr	r3, [pc, #540]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d005      	beq.n	8000d02 <HAL_RCC_OscConfig+0x29e>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	2b80      	cmp	r3, #128	; 0x80
 8000cfc:	d001      	beq.n	8000d02 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e282      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000d02:	4b81      	ldr	r3, [pc, #516]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a1b      	ldr	r3, [r3, #32]
 8000d0e:	061b      	lsls	r3, r3, #24
 8000d10:	497d      	ldr	r1, [pc, #500]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000d12:	4313      	orrs	r3, r2
 8000d14:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000d16:	e040      	b.n	8000d9a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69db      	ldr	r3, [r3, #28]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d023      	beq.n	8000d68 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000d20:	4b79      	ldr	r3, [pc, #484]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a78      	ldr	r2, [pc, #480]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d2c:	f7ff fcf8 	bl	8000720 <HAL_GetTick>
 8000d30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000d32:	e008      	b.n	8000d46 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8000d34:	f7ff fcf4 	bl	8000720 <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d901      	bls.n	8000d46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000d42:	2303      	movs	r3, #3
 8000d44:	e260      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000d46:	4b70      	ldr	r3, [pc, #448]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0f0      	beq.n	8000d34 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000d52:	4b6d      	ldr	r3, [pc, #436]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6a1b      	ldr	r3, [r3, #32]
 8000d5e:	061b      	lsls	r3, r3, #24
 8000d60:	4969      	ldr	r1, [pc, #420]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000d62:	4313      	orrs	r3, r2
 8000d64:	60cb      	str	r3, [r1, #12]
 8000d66:	e018      	b.n	8000d9a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8000d68:	4b67      	ldr	r3, [pc, #412]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a66      	ldr	r2, [pc, #408]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d74:	f7ff fcd4 	bl	8000720 <HAL_GetTick>
 8000d78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8000d7c:	f7ff fcd0 	bl	8000720 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e23c      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000d8e:	4b5e      	ldr	r3, [pc, #376]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1f0      	bne.n	8000d7c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0308 	and.w	r3, r3, #8
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d036      	beq.n	8000e14 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d019      	beq.n	8000de2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dae:	4b56      	ldr	r3, [pc, #344]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000db2:	4a55      	ldr	r2, [pc, #340]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dba:	f7ff fcb1 	bl	8000720 <HAL_GetTick>
 8000dbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000dc0:	e008      	b.n	8000dd4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dc2:	f7ff fcad 	bl	8000720 <HAL_GetTick>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d901      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e219      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000dd4:	4b4c      	ldr	r3, [pc, #304]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0f0      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x35e>
 8000de0:	e018      	b.n	8000e14 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000de2:	4b49      	ldr	r3, [pc, #292]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000de6:	4a48      	ldr	r2, [pc, #288]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000de8:	f023 0301 	bic.w	r3, r3, #1
 8000dec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dee:	f7ff fc97 	bl	8000720 <HAL_GetTick>
 8000df2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000df4:	e008      	b.n	8000e08 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000df6:	f7ff fc93 	bl	8000720 <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d901      	bls.n	8000e08 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8000e04:	2303      	movs	r3, #3
 8000e06:	e1ff      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000e08:	4b3f      	ldr	r3, [pc, #252]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1f0      	bne.n	8000df6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0320 	and.w	r3, r3, #32
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d036      	beq.n	8000e8e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d019      	beq.n	8000e5c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000e28:	4b37      	ldr	r3, [pc, #220]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a36      	ldr	r2, [pc, #216]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000e2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8000e34:	f7ff fc74 	bl	8000720 <HAL_GetTick>
 8000e38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000e3a:	e008      	b.n	8000e4e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e3c:	f7ff fc70 	bl	8000720 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e1dc      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000e4e:	4b2e      	ldr	r3, [pc, #184]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0f0      	beq.n	8000e3c <HAL_RCC_OscConfig+0x3d8>
 8000e5a:	e018      	b.n	8000e8e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000e5c:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a29      	ldr	r2, [pc, #164]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000e62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8000e68:	f7ff fc5a 	bl	8000720 <HAL_GetTick>
 8000e6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000e6e:	e008      	b.n	8000e82 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e70:	f7ff fc56 	bl	8000720 <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d901      	bls.n	8000e82 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	e1c2      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000e82:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1f0      	bne.n	8000e70 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 8086 	beq.w	8000fa8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <HAL_RCC_OscConfig+0x4a8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a1a      	ldr	r2, [pc, #104]	; (8000f0c <HAL_RCC_OscConfig+0x4a8>)
 8000ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000ea8:	f7ff fc3a 	bl	8000720 <HAL_GetTick>
 8000eac:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000eae:	e008      	b.n	8000ec2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eb0:	f7ff fc36 	bl	8000720 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b64      	cmp	r3, #100	; 0x64
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e1a2      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_RCC_OscConfig+0x4a8>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d0f0      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d106      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x480>
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eda:	4a0b      	ldr	r2, [pc, #44]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8000ee2:	e032      	b.n	8000f4a <HAL_RCC_OscConfig+0x4e6>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d111      	bne.n	8000f10 <HAL_RCC_OscConfig+0x4ac>
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef0:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000ef2:	f023 0301 	bic.w	r3, r3, #1
 8000ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000efc:	4a02      	ldr	r2, [pc, #8]	; (8000f08 <HAL_RCC_OscConfig+0x4a4>)
 8000efe:	f023 0304 	bic.w	r3, r3, #4
 8000f02:	6713      	str	r3, [r2, #112]	; 0x70
 8000f04:	e021      	b.n	8000f4a <HAL_RCC_OscConfig+0x4e6>
 8000f06:	bf00      	nop
 8000f08:	58024400 	.word	0x58024400
 8000f0c:	58024800 	.word	0x58024800
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	2b05      	cmp	r3, #5
 8000f16:	d10c      	bne.n	8000f32 <HAL_RCC_OscConfig+0x4ce>
 8000f18:	4b83      	ldr	r3, [pc, #524]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8000f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f1c:	4a82      	ldr	r2, [pc, #520]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8000f1e:	f043 0304 	orr.w	r3, r3, #4
 8000f22:	6713      	str	r3, [r2, #112]	; 0x70
 8000f24:	4b80      	ldr	r3, [pc, #512]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8000f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f28:	4a7f      	ldr	r2, [pc, #508]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f30:	e00b      	b.n	8000f4a <HAL_RCC_OscConfig+0x4e6>
 8000f32:	4b7d      	ldr	r3, [pc, #500]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8000f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f36:	4a7c      	ldr	r2, [pc, #496]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8000f38:	f023 0301 	bic.w	r3, r3, #1
 8000f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f3e:	4b7a      	ldr	r3, [pc, #488]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8000f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f42:	4a79      	ldr	r2, [pc, #484]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8000f44:	f023 0304 	bic.w	r3, r3, #4
 8000f48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d015      	beq.n	8000f7e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f52:	f7ff fbe5 	bl	8000720 <HAL_GetTick>
 8000f56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000f58:	e00a      	b.n	8000f70 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f5a:	f7ff fbe1 	bl	8000720 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e14b      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000f70:	4b6d      	ldr	r3, [pc, #436]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8000f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0ee      	beq.n	8000f5a <HAL_RCC_OscConfig+0x4f6>
 8000f7c:	e014      	b.n	8000fa8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f7e:	f7ff fbcf 	bl	8000720 <HAL_GetTick>
 8000f82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000f84:	e00a      	b.n	8000f9c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f86:	f7ff fbcb 	bl	8000720 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e135      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000f9c:	4b62      	ldr	r3, [pc, #392]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8000f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1ee      	bne.n	8000f86 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 812a 	beq.w	8001206 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8000fb2:	4b5d      	ldr	r3, [pc, #372]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000fba:	2b18      	cmp	r3, #24
 8000fbc:	f000 80ba 	beq.w	8001134 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	f040 8095 	bne.w	80010f4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fca:	4b57      	ldr	r3, [pc, #348]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a56      	ldr	r2, [pc, #344]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8000fd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fba3 	bl	8000720 <HAL_GetTick>
 8000fda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fde:	f7ff fb9f 	bl	8000720 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e10b      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000ff0:	4b4d      	ldr	r3, [pc, #308]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1f0      	bne.n	8000fde <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ffc:	4b4a      	ldr	r3, [pc, #296]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8000ffe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001000:	4b4a      	ldr	r3, [pc, #296]	; (800112c <HAL_RCC_OscConfig+0x6c8>)
 8001002:	4013      	ands	r3, r2
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	430a      	orrs	r2, r1
 8001010:	4945      	ldr	r1, [pc, #276]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8001012:	4313      	orrs	r3, r2
 8001014:	628b      	str	r3, [r1, #40]	; 0x28
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	3b01      	subs	r3, #1
 800101c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001024:	3b01      	subs	r3, #1
 8001026:	025b      	lsls	r3, r3, #9
 8001028:	b29b      	uxth	r3, r3
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001030:	3b01      	subs	r3, #1
 8001032:	041b      	lsls	r3, r3, #16
 8001034:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001038:	431a      	orrs	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800103e:	3b01      	subs	r3, #1
 8001040:	061b      	lsls	r3, r3, #24
 8001042:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001046:	4938      	ldr	r1, [pc, #224]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8001048:	4313      	orrs	r3, r2
 800104a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800104c:	4b36      	ldr	r3, [pc, #216]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 800104e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001050:	4a35      	ldr	r2, [pc, #212]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8001052:	f023 0301 	bic.w	r3, r3, #1
 8001056:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001058:	4b33      	ldr	r3, [pc, #204]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 800105a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800105c:	4b34      	ldr	r3, [pc, #208]	; (8001130 <HAL_RCC_OscConfig+0x6cc>)
 800105e:	4013      	ands	r3, r2
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001064:	00d2      	lsls	r2, r2, #3
 8001066:	4930      	ldr	r1, [pc, #192]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8001068:	4313      	orrs	r3, r2
 800106a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800106c:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 800106e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001070:	f023 020c 	bic.w	r2, r3, #12
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	492b      	ldr	r1, [pc, #172]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 800107a:	4313      	orrs	r3, r2
 800107c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800107e:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8001080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001082:	f023 0202 	bic.w	r2, r3, #2
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4927      	ldr	r1, [pc, #156]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 800108c:	4313      	orrs	r3, r2
 800108e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001090:	4b25      	ldr	r3, [pc, #148]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8001092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001094:	4a24      	ldr	r2, [pc, #144]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 8001096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800109a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 800109e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a0:	4a21      	ldr	r2, [pc, #132]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 80010a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80010a8:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 80010aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ac:	4a1e      	ldr	r2, [pc, #120]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 80010ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80010b4:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 80010b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b8:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010c0:	4b19      	ldr	r3, [pc, #100]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a18      	ldr	r2, [pc, #96]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 80010c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010cc:	f7ff fb28 	bl	8000720 <HAL_GetTick>
 80010d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d4:	f7ff fb24 	bl	8000720 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e090      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f0      	beq.n	80010d4 <HAL_RCC_OscConfig+0x670>
 80010f2:	e088      	b.n	8001206 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 80010fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001100:	f7ff fb0e 	bl	8000720 <HAL_GetTick>
 8001104:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001108:	f7ff fb0a 	bl	8000720 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e076      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800111a:	4b03      	ldr	r3, [pc, #12]	; (8001128 <HAL_RCC_OscConfig+0x6c4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f0      	bne.n	8001108 <HAL_RCC_OscConfig+0x6a4>
 8001126:	e06e      	b.n	8001206 <HAL_RCC_OscConfig+0x7a2>
 8001128:	58024400 	.word	0x58024400
 800112c:	fffffc0c 	.word	0xfffffc0c
 8001130:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001134:	4b36      	ldr	r3, [pc, #216]	; (8001210 <HAL_RCC_OscConfig+0x7ac>)
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800113a:	4b35      	ldr	r3, [pc, #212]	; (8001210 <HAL_RCC_OscConfig+0x7ac>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	2b01      	cmp	r3, #1
 8001146:	d031      	beq.n	80011ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	f003 0203 	and.w	r2, r3, #3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001152:	429a      	cmp	r2, r3
 8001154:	d12a      	bne.n	80011ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	091b      	lsrs	r3, r3, #4
 800115a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001162:	429a      	cmp	r2, r3
 8001164:	d122      	bne.n	80011ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001170:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001172:	429a      	cmp	r2, r3
 8001174:	d11a      	bne.n	80011ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	0a5b      	lsrs	r3, r3, #9
 800117a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001182:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001184:	429a      	cmp	r2, r3
 8001186:	d111      	bne.n	80011ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	0c1b      	lsrs	r3, r3, #16
 800118c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001194:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001196:	429a      	cmp	r2, r3
 8001198:	d108      	bne.n	80011ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	0e1b      	lsrs	r3, r3, #24
 800119e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d001      	beq.n	80011b0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e02b      	b.n	8001208 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80011b0:	4b17      	ldr	r3, [pc, #92]	; (8001210 <HAL_RCC_OscConfig+0x7ac>)
 80011b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b4:	08db      	lsrs	r3, r3, #3
 80011b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80011ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d01f      	beq.n	8001206 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_RCC_OscConfig+0x7ac>)
 80011c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ca:	4a11      	ldr	r2, [pc, #68]	; (8001210 <HAL_RCC_OscConfig+0x7ac>)
 80011cc:	f023 0301 	bic.w	r3, r3, #1
 80011d0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80011d2:	f7ff faa5 	bl	8000720 <HAL_GetTick>
 80011d6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80011d8:	bf00      	nop
 80011da:	f7ff faa1 	bl	8000720 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d0f9      	beq.n	80011da <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_RCC_OscConfig+0x7ac>)
 80011e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_RCC_OscConfig+0x7b0>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80011f2:	00d2      	lsls	r2, r2, #3
 80011f4:	4906      	ldr	r1, [pc, #24]	; (8001210 <HAL_RCC_OscConfig+0x7ac>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <HAL_RCC_OscConfig+0x7ac>)
 80011fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_RCC_OscConfig+0x7ac>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3730      	adds	r7, #48	; 0x30
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	58024400 	.word	0x58024400
 8001214:	ffff0007 	.word	0xffff0007

08001218 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d101      	bne.n	800122c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e19c      	b.n	8001566 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800122c:	4b8a      	ldr	r3, [pc, #552]	; (8001458 <HAL_RCC_ClockConfig+0x240>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 030f 	and.w	r3, r3, #15
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	429a      	cmp	r2, r3
 8001238:	d910      	bls.n	800125c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123a:	4b87      	ldr	r3, [pc, #540]	; (8001458 <HAL_RCC_ClockConfig+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 020f 	bic.w	r2, r3, #15
 8001242:	4985      	ldr	r1, [pc, #532]	; (8001458 <HAL_RCC_ClockConfig+0x240>)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	4313      	orrs	r3, r2
 8001248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800124a:	4b83      	ldr	r3, [pc, #524]	; (8001458 <HAL_RCC_ClockConfig+0x240>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d001      	beq.n	800125c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e184      	b.n	8001566 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	d010      	beq.n	800128a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691a      	ldr	r2, [r3, #16]
 800126c:	4b7b      	ldr	r3, [pc, #492]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001274:	429a      	cmp	r2, r3
 8001276:	d908      	bls.n	800128a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001278:	4b78      	ldr	r3, [pc, #480]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	4975      	ldr	r1, [pc, #468]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 8001286:	4313      	orrs	r3, r2
 8001288:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	2b00      	cmp	r3, #0
 8001294:	d010      	beq.n	80012b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	695a      	ldr	r2, [r3, #20]
 800129a:	4b70      	ldr	r3, [pc, #448]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d908      	bls.n	80012b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80012a6:	4b6d      	ldr	r3, [pc, #436]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	496a      	ldr	r1, [pc, #424]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0310 	and.w	r3, r3, #16
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d010      	beq.n	80012e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	699a      	ldr	r2, [r3, #24]
 80012c8:	4b64      	ldr	r3, [pc, #400]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 80012ca:	69db      	ldr	r3, [r3, #28]
 80012cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d908      	bls.n	80012e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80012d4:	4b61      	ldr	r3, [pc, #388]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	495e      	ldr	r1, [pc, #376]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0320 	and.w	r3, r3, #32
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d010      	beq.n	8001314 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69da      	ldr	r2, [r3, #28]
 80012f6:	4b59      	ldr	r3, [pc, #356]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80012fe:	429a      	cmp	r2, r3
 8001300:	d908      	bls.n	8001314 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001302:	4b56      	ldr	r3, [pc, #344]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	4953      	ldr	r1, [pc, #332]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 8001310:	4313      	orrs	r3, r2
 8001312:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d010      	beq.n	8001342 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	4b4d      	ldr	r3, [pc, #308]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 030f 	and.w	r3, r3, #15
 800132c:	429a      	cmp	r2, r3
 800132e:	d908      	bls.n	8001342 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001330:	4b4a      	ldr	r3, [pc, #296]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f023 020f 	bic.w	r2, r3, #15
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	4947      	ldr	r1, [pc, #284]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 800133e:	4313      	orrs	r3, r2
 8001340:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d055      	beq.n	80013fa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800134e:	4b43      	ldr	r3, [pc, #268]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	4940      	ldr	r1, [pc, #256]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 800135c:	4313      	orrs	r3, r2
 800135e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d107      	bne.n	8001378 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001368:	4b3c      	ldr	r3, [pc, #240]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d121      	bne.n	80013b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e0f6      	b.n	8001566 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b03      	cmp	r3, #3
 800137e:	d107      	bne.n	8001390 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001380:	4b36      	ldr	r3, [pc, #216]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d115      	bne.n	80013b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e0ea      	b.n	8001566 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d107      	bne.n	80013a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001398:	4b30      	ldr	r3, [pc, #192]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d109      	bne.n	80013b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0de      	b.n	8001566 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013a8:	4b2c      	ldr	r3, [pc, #176]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e0d6      	b.n	8001566 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013b8:	4b28      	ldr	r3, [pc, #160]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	f023 0207 	bic.w	r2, r3, #7
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4925      	ldr	r1, [pc, #148]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80013ca:	f7ff f9a9 	bl	8000720 <HAL_GetTick>
 80013ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d0:	e00a      	b.n	80013e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013d2:	f7ff f9a5 	bl	8000720 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e0be      	b.n	8001566 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d1eb      	bne.n	80013d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d010      	beq.n	8001428 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	429a      	cmp	r2, r3
 8001414:	d208      	bcs.n	8001428 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f023 020f 	bic.w	r2, r3, #15
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	490e      	ldr	r1, [pc, #56]	; (800145c <HAL_RCC_ClockConfig+0x244>)
 8001424:	4313      	orrs	r3, r2
 8001426:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_RCC_ClockConfig+0x240>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 030f 	and.w	r3, r3, #15
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d214      	bcs.n	8001460 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001436:	4b08      	ldr	r3, [pc, #32]	; (8001458 <HAL_RCC_ClockConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 020f 	bic.w	r2, r3, #15
 800143e:	4906      	ldr	r1, [pc, #24]	; (8001458 <HAL_RCC_ClockConfig+0x240>)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <HAL_RCC_ClockConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d005      	beq.n	8001460 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e086      	b.n	8001566 <HAL_RCC_ClockConfig+0x34e>
 8001458:	52002000 	.word	0x52002000
 800145c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	d010      	beq.n	800148e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691a      	ldr	r2, [r3, #16]
 8001470:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <HAL_RCC_ClockConfig+0x358>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001478:	429a      	cmp	r2, r3
 800147a:	d208      	bcs.n	800148e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800147c:	4b3c      	ldr	r3, [pc, #240]	; (8001570 <HAL_RCC_ClockConfig+0x358>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	4939      	ldr	r1, [pc, #228]	; (8001570 <HAL_RCC_ClockConfig+0x358>)
 800148a:	4313      	orrs	r3, r2
 800148c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	2b00      	cmp	r3, #0
 8001498:	d010      	beq.n	80014bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	4b34      	ldr	r3, [pc, #208]	; (8001570 <HAL_RCC_ClockConfig+0x358>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d208      	bcs.n	80014bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80014aa:	4b31      	ldr	r3, [pc, #196]	; (8001570 <HAL_RCC_ClockConfig+0x358>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	492e      	ldr	r1, [pc, #184]	; (8001570 <HAL_RCC_ClockConfig+0x358>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0310 	and.w	r3, r3, #16
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d010      	beq.n	80014ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	699a      	ldr	r2, [r3, #24]
 80014cc:	4b28      	ldr	r3, [pc, #160]	; (8001570 <HAL_RCC_ClockConfig+0x358>)
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d208      	bcs.n	80014ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80014d8:	4b25      	ldr	r3, [pc, #148]	; (8001570 <HAL_RCC_ClockConfig+0x358>)
 80014da:	69db      	ldr	r3, [r3, #28]
 80014dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4922      	ldr	r1, [pc, #136]	; (8001570 <HAL_RCC_ClockConfig+0x358>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0320 	and.w	r3, r3, #32
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d010      	beq.n	8001518 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69da      	ldr	r2, [r3, #28]
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <HAL_RCC_ClockConfig+0x358>)
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001502:	429a      	cmp	r2, r3
 8001504:	d208      	bcs.n	8001518 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001506:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <HAL_RCC_ClockConfig+0x358>)
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	4917      	ldr	r1, [pc, #92]	; (8001570 <HAL_RCC_ClockConfig+0x358>)
 8001514:	4313      	orrs	r3, r2
 8001516:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001518:	f000 f834 	bl	8001584 <HAL_RCC_GetSysClockFreq>
 800151c:	4602      	mov	r2, r0
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <HAL_RCC_ClockConfig+0x358>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	f003 030f 	and.w	r3, r3, #15
 8001528:	4912      	ldr	r1, [pc, #72]	; (8001574 <HAL_RCC_ClockConfig+0x35c>)
 800152a:	5ccb      	ldrb	r3, [r1, r3]
 800152c:	f003 031f 	and.w	r3, r3, #31
 8001530:	fa22 f303 	lsr.w	r3, r2, r3
 8001534:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_RCC_ClockConfig+0x358>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	4a0d      	ldr	r2, [pc, #52]	; (8001574 <HAL_RCC_ClockConfig+0x35c>)
 8001540:	5cd3      	ldrb	r3, [r2, r3]
 8001542:	f003 031f 	and.w	r3, r3, #31
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	fa22 f303 	lsr.w	r3, r2, r3
 800154c:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_RCC_ClockConfig+0x360>)
 800154e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <HAL_RCC_ClockConfig+0x364>)
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_RCC_ClockConfig+0x368>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff f896 	bl	800068c <HAL_InitTick>
 8001560:	4603      	mov	r3, r0
 8001562:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001564:	7bfb      	ldrb	r3, [r7, #15]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	58024400 	.word	0x58024400
 8001574:	080018e8 	.word	0x080018e8
 8001578:	24000004 	.word	0x24000004
 800157c:	24000000 	.word	0x24000000
 8001580:	24000008 	.word	0x24000008

08001584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800158a:	4bb3      	ldr	r3, [pc, #716]	; (8001858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001592:	2b18      	cmp	r3, #24
 8001594:	f200 8155 	bhi.w	8001842 <HAL_RCC_GetSysClockFreq+0x2be>
 8001598:	a201      	add	r2, pc, #4	; (adr r2, 80015a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800159a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159e:	bf00      	nop
 80015a0:	08001605 	.word	0x08001605
 80015a4:	08001843 	.word	0x08001843
 80015a8:	08001843 	.word	0x08001843
 80015ac:	08001843 	.word	0x08001843
 80015b0:	08001843 	.word	0x08001843
 80015b4:	08001843 	.word	0x08001843
 80015b8:	08001843 	.word	0x08001843
 80015bc:	08001843 	.word	0x08001843
 80015c0:	0800162b 	.word	0x0800162b
 80015c4:	08001843 	.word	0x08001843
 80015c8:	08001843 	.word	0x08001843
 80015cc:	08001843 	.word	0x08001843
 80015d0:	08001843 	.word	0x08001843
 80015d4:	08001843 	.word	0x08001843
 80015d8:	08001843 	.word	0x08001843
 80015dc:	08001843 	.word	0x08001843
 80015e0:	08001631 	.word	0x08001631
 80015e4:	08001843 	.word	0x08001843
 80015e8:	08001843 	.word	0x08001843
 80015ec:	08001843 	.word	0x08001843
 80015f0:	08001843 	.word	0x08001843
 80015f4:	08001843 	.word	0x08001843
 80015f8:	08001843 	.word	0x08001843
 80015fc:	08001843 	.word	0x08001843
 8001600:	08001637 	.word	0x08001637
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001604:	4b94      	ldr	r3, [pc, #592]	; (8001858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0320 	and.w	r3, r3, #32
 800160c:	2b00      	cmp	r3, #0
 800160e:	d009      	beq.n	8001624 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001610:	4b91      	ldr	r3, [pc, #580]	; (8001858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	08db      	lsrs	r3, r3, #3
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	4a90      	ldr	r2, [pc, #576]	; (800185c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800161c:	fa22 f303 	lsr.w	r3, r2, r3
 8001620:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001622:	e111      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001624:	4b8d      	ldr	r3, [pc, #564]	; (800185c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001626:	61bb      	str	r3, [r7, #24]
      break;
 8001628:	e10e      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800162a:	4b8d      	ldr	r3, [pc, #564]	; (8001860 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800162c:	61bb      	str	r3, [r7, #24]
      break;
 800162e:	e10b      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001630:	4b8c      	ldr	r3, [pc, #560]	; (8001864 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001632:	61bb      	str	r3, [r7, #24]
      break;
 8001634:	e108      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001636:	4b88      	ldr	r3, [pc, #544]	; (8001858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001640:	4b85      	ldr	r3, [pc, #532]	; (8001858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800164a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800164c:	4b82      	ldr	r3, [pc, #520]	; (8001858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001656:	4b80      	ldr	r3, [pc, #512]	; (8001858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800165a:	08db      	lsrs	r3, r3, #3
 800165c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	fb02 f303 	mul.w	r3, r2, r3
 8001666:	ee07 3a90 	vmov	s15, r3
 800166a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800166e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80e1 	beq.w	800183c <HAL_RCC_GetSysClockFreq+0x2b8>
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2b02      	cmp	r3, #2
 800167e:	f000 8083 	beq.w	8001788 <HAL_RCC_GetSysClockFreq+0x204>
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	2b02      	cmp	r3, #2
 8001686:	f200 80a1 	bhi.w	80017cc <HAL_RCC_GetSysClockFreq+0x248>
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_RCC_GetSysClockFreq+0x114>
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d056      	beq.n	8001744 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001696:	e099      	b.n	80017cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001698:	4b6f      	ldr	r3, [pc, #444]	; (8001858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0320 	and.w	r3, r3, #32
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d02d      	beq.n	8001700 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80016a4:	4b6c      	ldr	r3, [pc, #432]	; (8001858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	08db      	lsrs	r3, r3, #3
 80016aa:	f003 0303 	and.w	r3, r3, #3
 80016ae:	4a6b      	ldr	r2, [pc, #428]	; (800185c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80016b0:	fa22 f303 	lsr.w	r3, r2, r3
 80016b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	ee07 3a90 	vmov	s15, r3
 80016bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016ce:	4b62      	ldr	r3, [pc, #392]	; (8001858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016d6:	ee07 3a90 	vmov	s15, r3
 80016da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80016de:	ed97 6a02 	vldr	s12, [r7, #8]
 80016e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001868 <HAL_RCC_GetSysClockFreq+0x2e4>
 80016e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80016ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80016ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80016f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80016fe:	e087      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800170a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800186c <HAL_RCC_GetSysClockFreq+0x2e8>
 800170e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001712:	4b51      	ldr	r3, [pc, #324]	; (8001858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001722:	ed97 6a02 	vldr	s12, [r7, #8]
 8001726:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001868 <HAL_RCC_GetSysClockFreq+0x2e4>
 800172a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800172e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800173a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001742:	e065      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800174e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001870 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001756:	4b40      	ldr	r3, [pc, #256]	; (8001858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800175e:	ee07 3a90 	vmov	s15, r3
 8001762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001766:	ed97 6a02 	vldr	s12, [r7, #8]
 800176a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001868 <HAL_RCC_GetSysClockFreq+0x2e4>
 800176e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800177a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800177e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001782:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001786:	e043      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	ee07 3a90 	vmov	s15, r3
 800178e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001792:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001874 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800179a:	4b2f      	ldr	r3, [pc, #188]	; (8001858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017a2:	ee07 3a90 	vmov	s15, r3
 80017a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80017aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80017ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001868 <HAL_RCC_GetSysClockFreq+0x2e4>
 80017b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80017b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80017ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80017ca:	e021      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	ee07 3a90 	vmov	s15, r3
 80017d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001870 <HAL_RCC_GetSysClockFreq+0x2ec>
 80017da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017de:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80017ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80017f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001868 <HAL_RCC_GetSysClockFreq+0x2e4>
 80017f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80017fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80017fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800180e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	0a5b      	lsrs	r3, r3, #9
 8001816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800181a:	3301      	adds	r3, #1
 800181c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	ee07 3a90 	vmov	s15, r3
 8001824:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001828:	edd7 6a07 	vldr	s13, [r7, #28]
 800182c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001834:	ee17 3a90 	vmov	r3, s15
 8001838:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800183a:	e005      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	61bb      	str	r3, [r7, #24]
      break;
 8001840:	e002      	b.n	8001848 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001844:	61bb      	str	r3, [r7, #24]
      break;
 8001846:	bf00      	nop
  }

  return sysclockfreq;
 8001848:	69bb      	ldr	r3, [r7, #24]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3724      	adds	r7, #36	; 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	58024400 	.word	0x58024400
 800185c:	03d09000 	.word	0x03d09000
 8001860:	003d0900 	.word	0x003d0900
 8001864:	017d7840 	.word	0x017d7840
 8001868:	46000000 	.word	0x46000000
 800186c:	4c742400 	.word	0x4c742400
 8001870:	4a742400 	.word	0x4a742400
 8001874:	4bbebc20 	.word	0x4bbebc20

08001878 <memset>:
 8001878:	4402      	add	r2, r0
 800187a:	4603      	mov	r3, r0
 800187c:	4293      	cmp	r3, r2
 800187e:	d100      	bne.n	8001882 <memset+0xa>
 8001880:	4770      	bx	lr
 8001882:	f803 1b01 	strb.w	r1, [r3], #1
 8001886:	e7f9      	b.n	800187c <memset+0x4>

08001888 <__libc_init_array>:
 8001888:	b570      	push	{r4, r5, r6, lr}
 800188a:	4d0d      	ldr	r5, [pc, #52]	; (80018c0 <__libc_init_array+0x38>)
 800188c:	4c0d      	ldr	r4, [pc, #52]	; (80018c4 <__libc_init_array+0x3c>)
 800188e:	1b64      	subs	r4, r4, r5
 8001890:	10a4      	asrs	r4, r4, #2
 8001892:	2600      	movs	r6, #0
 8001894:	42a6      	cmp	r6, r4
 8001896:	d109      	bne.n	80018ac <__libc_init_array+0x24>
 8001898:	4d0b      	ldr	r5, [pc, #44]	; (80018c8 <__libc_init_array+0x40>)
 800189a:	4c0c      	ldr	r4, [pc, #48]	; (80018cc <__libc_init_array+0x44>)
 800189c:	f000 f818 	bl	80018d0 <_init>
 80018a0:	1b64      	subs	r4, r4, r5
 80018a2:	10a4      	asrs	r4, r4, #2
 80018a4:	2600      	movs	r6, #0
 80018a6:	42a6      	cmp	r6, r4
 80018a8:	d105      	bne.n	80018b6 <__libc_init_array+0x2e>
 80018aa:	bd70      	pop	{r4, r5, r6, pc}
 80018ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80018b0:	4798      	blx	r3
 80018b2:	3601      	adds	r6, #1
 80018b4:	e7ee      	b.n	8001894 <__libc_init_array+0xc>
 80018b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80018ba:	4798      	blx	r3
 80018bc:	3601      	adds	r6, #1
 80018be:	e7f2      	b.n	80018a6 <__libc_init_array+0x1e>
 80018c0:	080018f8 	.word	0x080018f8
 80018c4:	080018f8 	.word	0x080018f8
 80018c8:	080018f8 	.word	0x080018f8
 80018cc:	080018fc 	.word	0x080018fc

080018d0 <_init>:
 80018d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018d2:	bf00      	nop
 80018d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018d6:	bc08      	pop	{r3}
 80018d8:	469e      	mov	lr, r3
 80018da:	4770      	bx	lr

080018dc <_fini>:
 80018dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018de:	bf00      	nop
 80018e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018e2:	bc08      	pop	{r3}
 80018e4:	469e      	mov	lr, r3
 80018e6:	4770      	bx	lr
